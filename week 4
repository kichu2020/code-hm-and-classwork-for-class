#Hour glass pattern
n =int(input("Please enter your number:  "))
h=""
y = n*2
for i in range(n,0,-1):
    s = str(i)*y
    h += s +'\n'
    y-=1

k = ""
for g in range(2,n+2):
    ok = str(g)*y
    k+=(ok +'\n')
    y-=1
f = (f'''{h.strip()}
{k.strip()} ''')
y = f[0:-2]
y = y[::-1].strip()
print(f)
print(y)







x = int(input("Enter your number:  "))
def curtain_pattern(y):
    n_l = 0
    n_str = ""
    for f in range(x,0,-1):
        for i in range(x,f-1,-1):
            print(end = str(i))
            n_str  += str(i)
    print("" "")
    print(n_str[::-1])
    return y
last = curtain_pattern(x)








number = input("Please enter a number:  ")
def rand_square_ptr(n):
    repeat = int(number) * int(number)
    ok = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
    new = []
    while repeat>0 and repeat<=repeat:
        y = (ok.pop()).upper()
        ok.discard(y)
        new.append(y)
        repeat -= 1
    return new
n = rand_square_ptr(number)
print(n)



number = int(input("Enter a number:  "))
def ring_pattern(x):
    count = 8
    for i in range(1, number + 1):
        if i == 1:
            print(1)
            continue
        y = count * str(i)
        print(y)
        count += 8

    return x


ring_pattern(number)




def square_pattern_10(n):
    answer = []
    my_str = ''
    for i in range(1, n + 1):
        my_str += f'{i} '
    for i in range(n):
        # print(my_str)
        answer.append(my_str)
        my_str = my_str[2:] + my_str[:2]
#     return answer
# n = square_pattern_10(6)
# for i in n:
#     print(i)



def hour_glass(n):
    l2 = []
    r_l2=[]
    for i in range(1,n+1):
        answer = ""
        for j in range(1,n+2-i):
            answer += f'{j} '

        l2.append(answer.strip())
        r_l2.append(answer[::-1].strip())
    r_l2=r_l2[:-1]
    r_l2.reverse()
#     return l2 + r_l2
# y = hour_glass(3)
# for i in y:
#     print(i.center(20))




n = int(input("Enter your number:  "))
def alphabet_pyramid(x):
    f=1
    for i in range(1,n+1):
        z = 96+i
        y = chr(z) * f
        print(y.center(40))
        f+=2

    for gh in range(1,n+1):
        u=123-gh
        print((chr(u)*(f-2)).center(40))
        f-=2
    return x
y = alphabet_pyramid(n)







